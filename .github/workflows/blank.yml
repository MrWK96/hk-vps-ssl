name: SSL Certificate Request and Post

on:
  schedule:
    - cron: '0 0 */60 * *'  # 每60天执行一次
  workflow_dispatch:  # 支持手动触发

jobs:
  ssl_certificate:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install Certbot and DNS Plugin (Tencent Cloud)
        run: |
          # 更新 apt 源
          sudo apt update
          
          # 安装 Certbot
          sudo apt install -y certbot python3-pip

          # 使用 pip 安装 certbot-dns-tcloud 插件
          sudo pip3 install certbot-dns-tencentcloud

      - name: Create Tencent Cloud credentials file
        run: |
          # 创建腾讯云的配置文件，保存 SecretId 和 SecretKey
          echo "[dns-tencentcloud]" > /tmp/tcloud.ini
          echo "TENCENTCLOUD_SECRET_ID = ${{ secrets.TENCENT_CLOUD_SECRET_ID }}" >> /tmp/tcloud.ini
          echo "TENCENTCLOUD_SECRET_KEY = ${{ secrets.TENCENT_CLOUD_SECRET_KEY }}" >> /tmp/tcloud.ini
          chmod 600 /tmp/tcloud.ini  # 确保文件权限安全

      - name: Request SSL certificate with DNS-01 challenge
        env:
          DOMAIN1: ${{ secrets.DOMAIN1 }}
          DOMAIN2: ${{ secrets.DOMAIN2 }}
          EMAIL: ${{ secrets.EMAIL }}  # 从 GitHub Secrets 中获取电子邮件
        run: |
          # 打印域名值进行调试
          echo "DOMAIN1: $DOMAIN1"
          echo "DOMAIN2: $DOMAIN2"
          
          # 确保域名变量不是空的
          if [[ -z "$DOMAIN1" ]] || [[ -z "$DOMAIN2" ]]; then
            echo "Error: DOMAIN1 or DOMAIN2 is empty"
            exit 1
          fi

          # 使用 DNS-01 挑战通过腾讯云插件申请证书
          sudo certbot certonly -a dns-tencentcloud \
            --dns-tencentcloud-credentials /tmp/tcloud.ini \
            -d $DOMAIN1 -d $DOMAIN2 \
            --agree-tos --email $EMAIL --non-interactive

      - name: Save SSL certificate details
        run: |
          # 获取并保存证书路径和密钥
          certificate=$(cat /etc/letsencrypt/live/$DOMAIN1/fullchain.pem)
          certificate_key=$(cat /etc/letsencrypt/live/$DOMAIN1/privkey.pem)

          # 输出证书和密钥内容，供后续步骤使用
          echo "certificate=$certificate" >> $GITHUB_ENV
          echo "certificate_key=$certificate_key" >> $GITHUB_ENV

      - name: Post SSL certificate information and capture response
        run: |
          # 从 GitHub Secrets 中提取敏感参数
          URL=${{ secrets.URL }}
          PHPSESSID=${{ secrets.PHPSESSID }}
          A=${{ secrets.A }}
          C=${{ secrets.C }}

          # 通过 curl 发起 POST 请求，并将结果保存到变量
          response=$(curl -X POST $URL \
            -H "Content-Type: application/x-www-form-urlencoded" \
            -d "a=$A&b=$C" \
            -d "certificate=$certificate" \
            -d "certificate_key=$certificate_key" \
            -b "PHPSESSID=$PHPSESSID" \
            -v)  # 使用 -v 打印详细请求和响应信息

          # 输出 curl 请求的响应结果到 GitHub Actions 日志
          echo "Curl response: $response"
